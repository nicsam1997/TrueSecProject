using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using TrueSecProject.Models;
using TrueSecProject.Services;
using TrueSecProject.Validation;

namespace TrueSecProject.Controllers;

[Route("/vulnerabilities")]
[ApiController]
[Consumes("application/json")]
[Produces("application/json")]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
[ProducesResponseType(StatusCodes.Status401Unauthorized)]
[ProducesResponseType(StatusCodes.Status403Forbidden)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
[Authorize]
public class VulnerabilityController : ControllerBase
{
    private readonly IVulnerabilityService _vulnerabilityService;

    public VulnerabilityController(IVulnerabilityService vulnerabilityService)
    {
        _vulnerabilityService = vulnerabilityService;
    }

    // GET: /vulnerabilities
    [ProducesResponseType(StatusCodes.Status200OK)]
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Vulnerability>>> GetVulnerabilities()
    {
        var vulnerabilities = await _vulnerabilityService.GetAllAsync();
        return Ok(vulnerabilities);
    }

    // GET: /vulnerabilities/{id}
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [HttpGet("{id}")]
    public async Task<ActionResult<Vulnerability>> GetVulnerabilityById(string id)
    {
        var vulnerability = await _vulnerabilityService.GetByIdAsync(id);

        if (vulnerability == null)
        {
            return NotFound(new ProblemDetails
            {
                Title = "Vulnerability not found",
                Detail = $"No vulnerability with the ID '{id}' exists.",
                Status = StatusCodes.Status404NotFound
            });
        }

        return Ok(vulnerability);
    }

    // POST: /vulnerabilities
    [ProducesResponseType(StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status409Conflict)]
    [HttpPost]
    [Authorize(Roles = "Admin")]
    public async Task<IActionResult> CreateVulnerability([FromBody] Vulnerability vulnerability)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        await _vulnerabilityService.CreateAsync(vulnerability);

        return CreatedAtAction(nameof(GetVulnerabilityById), new { id = vulnerability.Id }, vulnerability);
    }

    // PUT: /vulnerabilities/{id}
    // Returns 201 Created if the vulnerability does not exist, if it does exist, it updates the existing vulnerability and returns 204 No Content.
    [ProducesResponseType(StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status204NoContent)]
    [HttpPut("{id}")]
    [Authorize(Roles = "Admin")]
    public async Task<IActionResult> UpdateVulnerability([FromBody] Vulnerability vulnerability, string id)
    {
        if (id != vulnerability.Id)
        {
            return BadRequest("ID mismatch");
        }

        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var didUpdate = await _vulnerabilityService.UpdateAsync(vulnerability);

        if (!didUpdate)
        {
            return CreatedAtAction(nameof(GetVulnerabilityById), new { id = vulnerability.Id }, vulnerability);
        }

        return NoContent();
    }
    // DELETE: /vulnerabilities/{id}
    [ProducesResponseType(StatusCodes.Status204NoContent)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [HttpDelete("{id}")]
    [Authorize(Roles = "Admin")]
    public async Task<IActionResult> DeleteVulnerability(string id)
    {
        var success = await _vulnerabilityService.DeleteAsync(id);

        if (!success)
        {
            return NotFound();
        }

        return NoContent();
    }
}