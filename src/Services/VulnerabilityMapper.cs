using TrueSecProject.Data;
using TrueSecProject.Models;

namespace TrueSecProject.Mappers
{
    public static class VulnerabilityMapper
    {
        public static VulnerabilityEntity ToEntity(Vulnerability model)
        {
            return new VulnerabilityEntity
            {
                // StixObject properties
                Id = model.Id,
                Type = model.Type.ToString(),
                SpecVersion = model.SpecVersion,
                CreatedByRef = model.CreatedByRef,
                Labels = model.Labels?.ToList(),
                Created = DateTime.Parse(model.Created),
                Modified = DateTime.Parse(model.Modified),
                Revoked = model.Revoked,
                Confidence = model.Confidence,
                Lang = model.Lang,
                ObjectMarkingRefs = model.ObjectMarkingRefs?.Select(obr => obr.Value).ToList(),

                // Vulnerability-specific properties
                Name = model.Name,
                Description = model.Description,

                // Nested object mapping
                ExternalReferences = model.ExternalReferences?
                    .Select(er => new ExternalReferenceEntity
                    {
                        Hashes = er.Hashes?.ToDictionary(h => h.Key.ToString(), h => h.Value.ToString()),
                        SourceName = er.SourceName,
                        Description = er.Description,
                        Url = er.Url,
                        ExternalId = er.ExternalId
                    }).ToList(),

                GranularMarkings = model.GranularMarkings?
                    .Select(gm => new GranularMarkingEntity
                    {
                        Lang = gm.Lang,
                        MarkingRef = gm.MarkingRef?.Value,
                        Selectors = gm.Selectors.ToList()
                    }).ToList()
            };
        }

        public static Vulnerability ToModel(VulnerabilityEntity entity)
        {
            return new Vulnerability(
                id: entity.Id,
                name: entity.Name,
                description: entity.Description,
                specVersion: entity.SpecVersion,
                createdByRef: entity.CreatedByRef,
                labels: entity.Labels,
                created: entity.Created.ToUniversalTime().ToString("o"),
                modified: entity.Modified.ToUniversalTime().ToString("o"),
                revoked: entity.Revoked,
                confidence: entity.Confidence,
                lang: entity.Lang,
                objectMarkingRefs: entity.ObjectMarkingRefs?.Select(s => new MarkingDefinition(s)).ToList(),


                externalReferences: entity.ExternalReferences?
                    .Select(er => new ExternalReference(
                        hashes: er.Hashes == null ? null : new Hashes(er.Hashes),
                        sourceName: er.SourceName,
                        description: er.Description,
                        url: er.Url,
                        externalId: er.ExternalId
                    )).ToList(),

                granularMarkings: entity.GranularMarkings?
                    .Select(gm => new GranularMarking(
                        lang: gm.Lang,
                        markingRef: gm.MarkingRef != null ? new MarkingDefinition(gm.MarkingRef) : null,
                        selectors: gm.Selectors
                    )).ToList()
            );
        }
    }
}