using TrueSecProject.Mappers;
using TrueSecProject.Models;
using TrueSecProject.Repositories;

namespace TrueSecProject.Services
{
    public class VulnerabilityService : IVulnerabilityService
    {
        private readonly IVulnerabilityRepository _vulnerabilityRepository;

        public VulnerabilityService(IVulnerabilityRepository vulnerabilityRepository)
        {
            _vulnerabilityRepository = vulnerabilityRepository;
        }

        public async Task<IEnumerable<Vulnerability>> GetAllAsync()
        {
            var entities = await _vulnerabilityRepository.GetAllAsync();
            return entities.Select(VulnerabilityMapper.ToModel);
        }

        public async Task<Vulnerability?> GetByIdAsync(string id)
        {
            var entity = await _vulnerabilityRepository.GetByIdAsync(id);
            return entity == null ? null : VulnerabilityMapper.ToModel(entity);
        }

        public async Task CreateAsync(Vulnerability vulnerability)
        {
            var entity = VulnerabilityMapper.ToEntity(vulnerability);
            await _vulnerabilityRepository.AddAsync(entity);
        }

        public async Task<bool> UpdateAsync(Vulnerability vulnerability)
        {
            var entity = VulnerabilityMapper.ToEntity(vulnerability);
            return await _vulnerabilityRepository.UpdateAsync(entity);
        }

        public async Task<bool> DeleteAsync(string id)
        {
            return await _vulnerabilityRepository.DeleteAsync(id);
        }
    }
}